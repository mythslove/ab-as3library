package com.noponies.net{	import flash.net.NetConnection;	import flash.events.Event;	import flash.net.Responder;	import flash.events.EventDispatcher;	import flash.events.NetStatusEvent;	import com.noponies.events.NpAmfEvent;	public class NpDbConnection extends EventDispatcher {		//--------------------------------------		//  PRIVATE VARIABLES		//--------------------------------------		private var _gateway:String		private static var _connection:NetConnection;		private var _responder:Responder;		private var _encoding:uint = 3;		//--------------------------------------		//  GETTERS / SETTERS		//--------------------------------------		public function set amfGateWay(newGate:String):void {			_gateway = newGate;			connect();		}				public function get amfGateWay():String {			return _gateway					}				//--------------------------------------		//  CONSTRUCTOR		//--------------------------------------		/**		 * 	This class handles creating a connection to an AMF Gateway PHP file.		 *	<p>onResult and onFault methods are handled internally, with each method dispatching an event.</p>		 *	@param gateway String Representing the URL of your AMF service gateway. 		 */		public function NpDbConnection(gateway:String) {			this._gateway = gateway;			connect();		}				/**		 * 	This class handles creating a connection to an AMF Gateway PHP file.		 *	<p>OnResult and onFault methods are handled internally, with each method dispatching an event.</p>		 *	@param serviceFunction String Representing the remote function you would like to call via AMF. 		 *	@param args Arguments for remote function (if any). Seperate params via a comma.		 */		public function queryDb(serviceFunction:String, ...args:*):void {			// Create an array that will temporarily store all the arguments			var collectArgs:Array = new Array();			// Add the fixed arguments			collectArgs.push(serviceFunction);			collectArgs.push(_responder);			// Loop through the optional arguments and add them too			for (var i:uint=0; i<args.length; i++) {				collectArgs.push(args[i]);			}			// Create a reference to the function we will call			var callFunction:Function = _connection.call;			// Call the function using the arguments			callFunction.apply(_connection,collectArgs);		}		/**		 * 	Static method that allows for you to call your remoting service without needing to reset the connection etc.		 *	@param serviceFunction String Representing the remote function you would like to call via AMF. 		*	@param resultHandler Function Representing the result handler for your Remote call.		*	@param faultHandler Function Representing the fault handler for your Remote call.		*	@param Arguments for Remote call, if any.		 */				public static function queryAMF(serviceFunction:String, resultHandler:Function, faultHandler:Function, ...args:*) : void {		 // Create responder		 var responder:Responder = new Responder(resultHandler, faultHandler);		 // Create an array that will temporarily store all the arguments		 var collectArgs:Array = new Array;		 // Add the fixed arguments		 collectArgs.push(serviceFunction);		 collectArgs.push(responder);		 // Loop through the optional arguments and add them too		 for (var i:uint=0; i<args.length; i++){		  collectArgs.push(args[i]);		 }		 // Create a reference to the function we will call		 var callFunction:Function = _connection.call;		 // Call the function using the arguments		 callFunction.apply(_connection,collectArgs);		}				//connect to php service		private function connect():void {			_responder = new Responder(onResult,onFault);			_connection = new NetConnection();			_connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);			try {                _connection.connect(_gateway);            } catch (error:Error) {                trace("Can't connect..."+ error);            }					}		//--------------------------------------		//  EVENT HANDLERS		//--------------------------------------		//successful result		private function onResult(result:Object):void {			var resultEvent:NpAmfEvent = new NpAmfEvent(NpAmfEvent.RESULT,true);			resultEvent.dbResult = result;			dispatchEvent(resultEvent);		}		//failed result		private function onFault(fault:Object):void {			var faultEvent:NpAmfEvent = new NpAmfEvent(NpAmfEvent.FAULT,true);			faultEvent.dbResult = fault;			dispatchEvent(faultEvent);		}				//netstatus		private function netStatusHandler(event:NetStatusEvent):void {            trace(event.info.code)         }	}}