package net.guttershark.util.collections{	import net.guttershark.util.collections.ICollection;	/**	 * IQueue defines the queue data structure.  A queue is a special collection type in which elements	 * are added to one end, and removed from the other end. You add elements via <code>enqueue</code>, 	 * and remove them via <code>dequeue</code>.	 */	public interface IQueue extends ICollection 	{		/**		 * The next object in queue, would be return and removed on a subsequent call to dequeue.		 */		function get head():Object;		/**		 * Add an object to end of the queue.		 */		function enqueue( o:Object ):void;		/**		 * Remove and returns the next object in the queue.		 */		function dequeue():Object;		}}