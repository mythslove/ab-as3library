package net.guttershark.util.collections{	import flash.utils.Dictionary;	import flash.utils.Proxy;	import flash.utils.flash_proxy;		import net.guttershark.util.ObjectUtils;			/**	 * OrderedDictionary provides a <code>Dictionary</code> like collection 	 * object which persists the order of entries similar to an <code>Array</code>.	 * 	 * <listing>		 * var od:OrderedDictionary = new OrderedDictionary();	 * od['test0'] = "foo";	 * od['test1'] = "bar";	 * od.push("test3","doe");	 * 	 * trace(od['test1']);	 * trace(od['test3']);	 * 	 * trace(od.pop());	 * 	 * var i:int = 0;	 * var l:int = od.length;	 * for(i;i&lt;l;i++)	 * { 	 *     trace(od[i]);	 * }	 * </listing>	 */	final public class OrderedDictionary extends Proxy 	{				/**		 * @private		 * The dictionary that object to index's are stored in.		 */		protected var dict:Dictionary;				/**		 * @private		 * The array that objects are stored in.		 */		protected var arr:Array;		/**		 * Constructor for OrderedDictionary instances.		 * 		 * @param weakKeys Whether or not the dictionary's keys are weak references to objects.		 */		public function OrderedDictionary(weakKeys:Boolean=false)		{			dict = new Dictionary(weakKeys);			arr = new Array();		}				/**		 * @private		 * Set the internal data needed for a clone.		 */		public function setProviders(arr:Array,dict:Dictionary):void		{			arr = arr;			dict = dict;		}		/**		 * A non-negative integer specifying the number of elements in the ordered dictionary.		 */		public function get length():uint		{			return arr.length;		}				/**		 * Adds one or more elements to the end of an ordered dictionary and returns the new length of the array.		 * 		 * @param name The key identifier.		 * @param value The value to store.		 */		public function push(name:*, value:*):void		{			var index:uint = arr.push(value);			dict[name] = index - 1;		}				/**		 * Removes the last element from an ordered dictionary and returns the value of that element.		 */		public function pop():*		{			var obj:* = arr.pop();			dict[obj] = null;			return obj;		}				/**		 * Removes the first element from an ordered dictionary and returns that element.		 */		public function shift():*		{			var obj:* = arr.shift();			for each(var k:* in dict) dict[k]--;			dict[obj] = null;			return obj;		}				/**		 * Adds one or more elements to the beginning of an ordered dictionary and returns the new length of the array.		 * 		 * @param name The key name.		 * @param value The value to store.		 */		public function unshift(name:*,value:*):uint		{			for each(var obj:* in dict) dict[obj]++;			dict[name] = 0;			arr[0] = value;			return arr.length;		}				/**		 * Clone this OrderedDictionary.		 * 		 * @param weakKeys Whether or not the new dictionary will have weak references to it's objects.		 */		public function clone(weakKeys:Boolean=false):OrderedDictionary		{			var d:OrderedDictionary = new OrderedDictionary(weakKeys);			d.setProviders(arr.concat(),ObjectUtils.gi().clone(dict));			return d;		}		/**		 * @private		 */		flash_proxy override function getProperty(name:*):*		{			var index:uint;			if(dict[name] >= 0)			{				index = dict[name];				return arr[index];			}			else if(uint(name) < arr.length)			{				index = uint(name);				return arr[index];			}			return undefined;		}		/**		 * @private		 */		flash_proxy override function setProperty(name:*, value:*):void 		{			var index:int;			if(!(name in dict))		    {				index = arr.push(value);				dict[name] = index - 1;			}			else			{				index = dict[name];				arr[index] = value;			}		}		}}