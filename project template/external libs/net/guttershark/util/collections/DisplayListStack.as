package net.guttershark.util.collections{	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.Sprite;	import net.guttershark.util.collections.DisplayListCollection;	import net.guttershark.util.collections.IStack;	import net.guttershark.util.collections.StackIterator;		/**	 * DisplayList base Stack data structure.	 */	public class DisplayListStack extends DisplayListCollection implements IStack 	{		/**		 * DisplayListStack Constructor creates a new <code>DisplayListStack</code>.		 * You may have it wrap an existing <code>DisplayObjectContainer</code> 		 * or the constructor will create an empty <code>Sprite</code> for you.		 */		public function DisplayListStack(container:DisplayObjectContainer = null) 		{			if ( !container ) container = new Sprite();			super(container);		}		/**		 * @inheritDoc		 */		public function get top():Object 		{			return container.getChildAt(container.numChildren - 1);		}		/**		 * @inheritDoc		 */		public function push(o:Object):void 		{			if ( !(o is DisplayObject ) ) throw new ArgumentError("Require an object of type DisplayObject.");			container.addChild(o as DisplayObject);					}		/**		 * @inheritDoc		 */		public function pop():Object 		{			return container.removeChildAt(container.numChildren - 1);		}		/**		 * @inheritDoc		 */		override public function getIterator():IIterator 		{			return new StackIterator(this);				}	}}